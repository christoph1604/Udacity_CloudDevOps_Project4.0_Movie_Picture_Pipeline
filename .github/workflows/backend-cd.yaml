name: Backend Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - './starter/backend/**'

defaults:
  run:
    working-directory: ./starter/backend

jobs:

  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python 3.10.16
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      - name: Install pipenv
        run: pip install pipenv
      - name: Install dependencies
        run: pipenv install --dev
      - name: Run linter
        run: |
          pipenv run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python 3.10.16
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      - name: Install pipenv
        run: pip install pipenv
      - name: Install dependencies
        run: pipenv install
      - name: Run tests
        run: pipenv run test

  build: 
    needs: [linting, test]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: mp-backend
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      MY_APP_AWS_REGION: ${{ secrets.MY_APP_AWS_REGION}}
      EKS_CLUSTER_NAME: myEKSCluster
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python 3.10.16
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      - name: Install pipenv
        run: pip install pipenv
      - name: Install dependencies
        run: pipenv install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker image
        run: |
          IMAGE_TAG=$IMAGE_NAME:${{ github.sha }}
          docker build --tag=$IMAGE_TAG .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: $AWS_ACCESS_KEY_ID
          aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
          aws-session-token: $AWS_SESSION_TOKEN
          aws-region: $MY_APP_AWS_REGION
      - name: Login to Amazon ECR
        id: login-to-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag the Docker image
        run: |
          IMAGE_URI=${{ steps.login-to-ecr.outputs.registry }}/$IMAGE_TAG
          docker tag $IMAGE_TAG $IMAGE_URI
      - name: Push the Docker image to ECR
        run: |
          docker push $IMAGE_URI

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: mp-backend
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      MY_APP_AWS_REGION: ${{ secrets.MY_APP_AWS_REGION }}
      EKS_CLUSTER_NAME: myEKSCluster
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python 3.10.16
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      - name: Install pipenv
        run: pip install pipenv
      - name: Install dependencies
        run: pipenv install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: $AWS_ACCESS_KEY_ID
          aws-secret-access-key: $AWS_SECRET_ACCESS_KEY
          aws-session-token: $AWS_SESSION_TOKEN
          aws-region: $MY_APP_AWS_REGION

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
      - name: Deploy Docker file to Kubernetes cluster      
        run: |
          cd ./k8s
          kustomize edit set image backend=$IMAGE_URI
          kustomize build | kubectl apply -f -
